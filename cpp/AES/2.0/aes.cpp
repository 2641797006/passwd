#include "aes.h"

#define _RotDword(d)	( d<<8 | d>>24 )
#define RotDword(d)	_RotDword( (d) )
#define _SwapDword(d)	( d>>24 | ((d>>8) & 0xff00) | ((d<<8) & 0xff0000 ) | d<<24 )
#define SwapDword(d)	_SwapDword( (d) )

namespace akm {
using namespace std;

Aes::Aes()
{
	ek = new DWORD[60];
}

Aes::~Aes()
{
	delete[] ek;
}

Aes::DWORD
Aes::mul(DWORD a, DWORD b)
{
	DWORD r=0;
	for (DWORD i=1; i&~0x100; i<<=1) {
		if (b & i)
			r ^= a;
		a = xtime(a);
	}
	return r;
}

Aes::DWORD
Aes::sub_dword(DWORD d)
{
	DWORD r=0, t;
	for (DWORD i=0; i<32; i+=8) {
		t = d>>i;
		t = S_Box[ (t>>4)&0xf ][ t&0xf ];
		r |= t<<i;
	}
	return r;
}

void
Aes::key_expansion(DWORD *key)
{
	DWORD i, t;
	for (i=0; i<nk; ++i)
		ek[i] = SwapDword(key[i]);
	DWORD n = (nr + 1) << 2;
	while (i <= n) {
		t = ek[i-1];
		if (i%nk == 0)
			t = sub_dword(RotDword(t)) ^ Rcon[i/nk-1];
		else if (nk == 8 && (i%nk == 4))
			t = sub_dword(t);
		ek[i] = ek[i-nk] ^ t;
		++i;
	}
}

void
Aes::add_round_key(DWORD *da, DWORD *k)
{
	BYTE *const ba = (BYTE*)da;
	for (DWORD i=0; i<4; ++i) {
		ba[i] ^= k[i] >> 24;
		ba[i+4] ^= (k[i] >> 16) & 0xff;
		ba[i+8] ^= (k[i] >> 8) & 0xff;
		ba[i+12] ^= k[i] & 0xff;
	}
}

void
Aes::sub_bytes(DWORD *da)
{
	BYTE *const ba = (BYTE*)da;
	for (DWORD i=0; i<16; ++i)
		ba[i] = S_Box[ (ba[i]>>4)&0xf ][ ba[i]&0xf ];
}

void
Aes::shift_rows(DWORD *da)
{
	da[1] = da[1]>>8 | da[1]<<24;
	da[2] = da[2]>>16 | da[2]<<16;
	da[3] = da[3]>>24 | da[3]<<8;
}

void
Aes::mix_columns(DWORD *da)
{
	BYTE *const ba = (BYTE*)da;
	BYTE ca[4]; // col
	for (DWORD i=0; i<4; ++i) {
		for (DWORD j=0; j<4; ++j)
			ca[j] = ba[i+(j<<2)];
		ba[i] = mul(0x2, ca[0]) ^ mul(0x3, ca[1]) ^ ca[2] ^ ca[3];
		ba[i+4] = ca[0] ^ mul(0x2, ca[1]) ^ mul(0x3, ca[2]) ^ ca[3];
		ba[i+8] = ca[0] ^ ca[1] ^ mul(0x2, ca[2]) ^ mul(0x3, ca[3]);
		ba[i+12] = mul(0x3, ca[0]) ^ ca[1] ^ ca[2] ^ mul(0x2, ca[3]);
	}
}

void
Aes::inv_sub_bytes(DWORD *da)
{
	BYTE *const ba = (BYTE*)da;
	for (DWORD i=0; i<16; ++i)
		ba[i] = Inv_S_Box[ (ba[i]>>4)&0xf ][ ba[i]&0xf ];
}

void
Aes::inv_shift_rows(DWORD *da)
{
	da[1] = da[1]<<8 | da[1]>>24;
	da[2] = da[2]<<16 | da[2]>>16;
	da[3] = da[3]<<24 | da[3]>>8;
}

void
Aes::inv_mix_columns(DWORD *da)
{
	BYTE *const ba = (BYTE*)da;
	BYTE ca[4]; // col
	for (DWORD i=0; i<4; ++i) {
		for (DWORD j=0; j<4; ++j)
			ca[j] = ba[i+(j<<2)];
		ba[i] = mul(0x0e, ca[0]) ^ mul(0x0b, ca[1]) ^ mul(0x0d, ca[2]) ^ mul(0x09, ca[3]);
		ba[i+4] = mul(0x09, ca[0]) ^ mul(0x0e, ca[1]) ^ mul(0x0b, ca[2]) ^ mul(0x0d, ca[3]);
		ba[i+8] = mul(0x0d, ca[0]) ^ mul(0x09, ca[1]) ^ mul(0x0e, ca[2]) ^ mul(0x0b, ca[3]);
		ba[i+12] = mul(0x0b, ca[0]) ^ mul(0x0d, ca[1]) ^ mul(0x09, ca[2]) ^ mul(0x0e, ca[3]);
	}
}

void
Aes::fcrypt(fstream& in, fstream& out, int flag)
{
	in.seekg(0, ios_base::end);
	size_t size = in.tellg();
	if ( ! size )
		return;
	string s;
	s.resize( size );
	in.seekg(0);
	in.read( &s[0], size );
	s = flag ? encrypt(s) : decrypt(s);
	out.write( &s[0], s.size() );
}

void
Aes::set_key(string const& s, DWORD n)
{
	DWORD da[4];
	md5(s);
	da[0] = md5.getA();
	da[1] = md5.getB();
	da[2] = md5.getC();
	da[3] = md5.getD();
	set_key(da);
}

void
Aes::encrypt(DWORD *da)
{
	BYTE *const ba = (BYTE*)da;
	for (DWORD r=1; r<4; ++r)
		for (DWORD c=0; c<r; ++c)
			swap( ba[(r<<2)+c], ba[r+(c<<2)] );

	add_round_key(da, ek);

	for (DWORD round=1; round<nr; ++round) {
		sub_bytes(da);
		shift_rows(da);
		mix_columns(da);
		add_round_key(da, ek+(round<<2));
	}

	sub_bytes(da);
	shift_rows(da);
	add_round_key(da, ek+(nr<<2));

	for (DWORD r=1; r<4; ++r)
		for (DWORD c=0; c<r; ++c)
			swap( ba[(r<<2)+c], ba[r+(c<<2)] );
}

void
Aes::decrypt(DWORD *da)
{
	BYTE *const ba = (BYTE*)da;
	for (DWORD r=1; r<4; ++r)
		for (DWORD c=0; c<r; ++c)
			swap( ba[(r<<2)+c], ba[r+(c<<2)] );

	add_round_key(da, ek+(nr<<2));

	for (DWORD round=nr-1; round>0; --round) {
		inv_shift_rows(da);
		inv_sub_bytes(da);
		add_round_key(da, ek+(round<<2));
		inv_mix_columns(da);
	}

	inv_shift_rows(da);
	inv_sub_bytes(da);
	add_round_key(da, ek);

	for (DWORD r=1; r<4; ++r)
		for (DWORD c=0; c<r; ++c)
			swap( ba[(r<<2)+c], ba[r+(c<<2)] );
}

string
Aes::encrypt(string const& s)
{
	string es = s;
	size_t size = es.size();
	if ( ! size )
		return "";
	size_t n = size % 16;
	es.resize( size-n+16, 16-n );
	n = es.size()/16;
	DWORD *da = (DWORD*)&es[0];
	for (DWORD i=0; i<n; ++i,da+=4)
		encrypt(da);
	return es;
}

string
Aes::decrypt(string const& s)
{
	string ds = s;
	size_t size = ds.size();
	if ( ! size || size%16 )
		return "";
	size_t n = size/16;
	DWORD *da = (DWORD*)&ds[0];
	for (DWORD i=0; i<n; ++i,da+=4)
		decrypt(da);
	n = ds[size-1];
	if (n <= 16 )
		ds.resize( size-n );
	return ds;
}

void
Aes::encrypt(fstream& in, fstream& out)
{
	fcrypt(in, out, 1);
}

void
Aes::decrypt(fstream& in, fstream& out)
{
	fcrypt(in, out, 0);
}

Aes::DWORD Aes::S_Box[16][16]={
	{ 0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76 },
	{ 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0 },
	{ 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15 },
	{ 0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75 },
	{ 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84 },
	{ 0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF },
	{ 0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8 },
	{ 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2 },
	{ 0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73 },
	{ 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB },
	{ 0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79 },
	{ 0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08 },
	{ 0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A },
	{ 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E },
	{ 0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF },
	{ 0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16 }
};

Aes::DWORD Aes::Inv_S_Box[16][16] = {
	{ 0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB },
	{ 0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB },
	{ 0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E },
	{ 0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25 },
	{ 0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92 },
	{ 0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84 },
	{ 0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06 },
	{ 0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B },
	{ 0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73 },
	{ 0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E },
	{ 0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B },
	{ 0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4 },
	{ 0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F },
	{ 0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF },
	{ 0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61 },
	{ 0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D }
};

Aes::DWORD Aes::Rcon[11] = {
0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000,
0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000,
0x6c000000
};

} // namespace akm

